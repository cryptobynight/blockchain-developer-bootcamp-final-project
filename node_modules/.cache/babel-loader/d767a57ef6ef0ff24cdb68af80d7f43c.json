{"ast":null,"code":"import _toConsumableArray from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/majikk/Desktop/ConsenSys/diamondV3/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Diamonds from '../abis/Diamonds.json';\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from 'mdb-react-ui-kit';\nimport './App.css'; // import detectEthereumProvider from \"@metamask/detect-provider\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    // async componentDidMount() {\n    //     await this.loadWeb3();\n    //     await this.loadBlockchainData();\n    // }\n    // // first up is to detect ethereum provider\n    // async loadWeb3() {\n    //     const provider = await detectEthereumProvider();\n    //     // modern browsers\n    //     // if there is a provider then lets\n    //     // lets log that it's working and access the window from the doc\n    //     // to set Web3 to the provider \n    //     if(provider) {\n    //         console.log('ethereum wallet is connected')\n    //         window.web3 = new Web3(provider)\n    //     } else {\n    //         // no ethereum provider\n    //         console.log('no ethereum wallet detected')\n    //     }\n    // }\n    // async loadBlockchainData() {\n    //     const web3 = window.web3\n    //     const accounts = await web3.eth.getAccounts()\n    //     this.setState({account:accounts[0]})\n    //     // create a constant js variable networkId which \n    //     //is set to blockchain network id \n    //     const networkId = await web3.eth.net.getId()\n    //     const networkData = Diamonds.networks[networkId]\n    //      if(networkData) {\n    //          // EXERCISE TIME!!!! :)\n    //          // 1. create a var abi set to the Kryptobird abi\n    //          // 2. create a var address set to networkData address\n    //          // 3. create a var contract which grabs a \n    //          //new instance of web3 eth Contract  \n    //          // 4. log in the console the var contract successfully - GOOD LUCK!!!!\n    //          const abi = Diamonds.abi;\n    //          const address = networkData.address; \n    //          const contract = new web3.eth.Contract(abi, address)\n    //          this.setState({contract})\n    //          // call the total supply of our Krypto Birdz \n    //          // grab the total supply on the front end and log the results\n    //          // go to web3 doc and read up on methods and call \n    //          const totalSupply = await contract.methods.totalSupply().call()\n    //         this.setState({totalSupply})\n    //         // set up an array to keep track of tokens \n    //         // load KryptoBirdz\n    //         for(let i = 1; i <= totalSupply; i++) {\n    //             const diamond = await contract.methods.diamonds(i - 1).call()\n    //             // how should we handle the state on the front end? \n    //             this.setState({\n    //                 diamonds:[...this.state.diamonds, diamond]\n    //             })\n    //         }\n    //      } else {\n    //          window.alert('Smart contract not deployed')\n    //      }\n    // }\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, diamond;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                // const accounts = await ethereum.request({ method: 'eth_accounts' });\n                this.setState({\n                  account: accounts[0]\n                }); //get contract\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = Diamonds.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                abi = Diamonds.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                }); //get total supply\n\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                }); //load diamonds\n\n                i = 0;\n\n              case 19:\n                if (!(i < totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.diamonds(i).call();\n\n              case 22:\n                diamond = _context3.sent;\n                this.setState({\n                  diamonds: [].concat(_toConsumableArray(this.state.diamonds), [diamond])\n                });\n\n              case 24:\n                i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert(\"Smart contract not deployed.\");\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (diamond) {\n      _this.state.contract.methods.mint(diamond).send({\n        from: _this.state.account\n      }).once('receipt', function (receipt) {\n        _this.setState({\n          diamonds: [].concat(_toConsumableArray(_this.state.diamonds), [diamond])\n        });\n      }).on('confirmation', function (confNumber, receipt, latestBlockHash) {\n        window.alert(\"Congratulations! Your NFT has been minted!\\n\\n\" + diamond);\n      }).on('error', function (error) {\n        window.alert(\"Mint failed!\\n\\nPlease try again.\");\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      diamonds: [],\n      testimages: ['https://i.ibb.co/3TBLH2B/d1.png', 'https://i.ibb.co/jfH8wzv/d2.png']\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container-full\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, console.log(this.state.diamonds), React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Diamond Hands\"), React.createElement(\"ul\", {\n        className: \"nav-bar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, this.state.account)))), React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Diamond Hands\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var diamond = _this2.diamond.value;\n\n          _this2.mint(diamond);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Add file location...\",\n        className: \"form-control mb-1\",\n        ref: function ref(input) {\n          return _this2.diamond = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-primary btn-black\",\n        value: \"MINT\",\n        style: {\n          margin: '6px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row textCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, this.state.testimages.map(function (diamond, key) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, React.createElement(MDBCard, {\n          className: \"token img\",\n          style: {\n            maxWidth: '22rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }, React.createElement(MDBCardImage, {\n          position: \"top\",\n          height: \"250rem\",\n          style: {\n            marginRight: '4px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, \"Test\"), React.createElement(MDBCardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }, React.createElement(MDBCardTitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, \"Diamond Hands\"), React.createElement(MDBCardText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, \"These diamonds are all uniquely mined and one of a kind. Each diamond can only be owned by a single person.\"), React.createElement(MDBBtn, {\n          href: diamond,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, \"Download\")))));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/majikk/Desktop/ConsenSys/diamondV3/src/components/App.js"],"names":["React","Component","Web3","Diamonds","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardImage","MDBBtn","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","diamonds","diamond","state","props","mint","send","from","once","receipt","on","confNumber","latestBlockHash","error","testimages","console","log","color","opacity","event","preventDefault","value","input","margin","map","key","maxWidth","marginRight"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAAQC,OAAR,EAAiBC,WAAjB,EAA8BC,YAA9B,EAA4CC,WAA5C,EAAyDC,YAAzD,EAAuEC,MAAvE,QAAoF,kBAApF;AACA,OAAO,WAAP,C,CACA;;IAEMC,G;;;;;;;AAEF;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;uBAGU,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;;;qBAIFC,MAAM,CAACC,Q;;;;;AACTD,gBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIb,IAAJ,CAASW,MAAM,CAACC,QAAhB,CAAd;;uBACMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,E;;;;;;;AAEH,oBAAIH,MAAM,CAACE,IAAX,EAAiB;AACpBF,kBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIb,IAAJ,CAASW,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACD,iBAFI,MAGA;AACHJ,kBAAAA,MAAM,CAACK,KAAP,CAAa,qEAAb;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIKH,gBAAAA,I,GAAOF,MAAM,CAACE,I;;uBACGA,IAAI,CAACI,GAAL,CAASC,WAAT,E;;;AAAjBC,gBAAAA,Q;AACN;AACA,qBAAKC,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAACF,QAAQ,CAAC,CAAD;AAAjB,iBAAd,E,CAEA;;;uBACwBN,IAAI,CAACI,GAAL,CAASK,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AACAC,gBAAAA,W,GAAcxB,QAAQ,CAACyB,QAAT,CAAkBF,SAAlB,C;;qBAEjBC,W;;;;;AACOE,gBAAAA,G,GAAM1B,QAAQ,CAAC0B,G;AACfC,gBAAAA,O,GAAUH,WAAW,CAACG,O;AACtBC,gBAAAA,Q,GAAW,IAAIhB,IAAI,CAACI,GAAL,CAASa,QAAb,CAAsBH,GAAtB,EAA2BC,OAA3B,C;AACjB,qBAAKR,QAAL,CAAc;AAACS,kBAAAA,QAAQ,EAARA;AAAD,iBAAd,E,CAEA;;;uBAC0BA,QAAQ,CAACE,OAAT,CAAiBC,WAAjB,GAA+BC,IAA/B,E;;;AAApBD,gBAAAA,W;AACN,qBAAKZ,QAAL,CAAc;AAACY,kBAAAA,WAAW,EAAXA;AAAD,iBAAd,E,CAEA;;AACQE,gBAAAA,C,GAAI,C;;;sBAAGA,CAAC,GAAGF,W;;;;;;uBACOH,QAAQ,CAACE,OAAT,CAAiBI,QAAjB,CAA0BD,CAA1B,EAA6BD,IAA7B,E;;;AAAhBG,gBAAAA,O;AACN,qBAAKhB,QAAL,CAAc;AACVe,kBAAAA,QAAQ,+BAAK,KAAKE,KAAL,CAAWF,QAAhB,IAA0BC,OAA1B;AADE,iBAAd;;;AAF4BF,gBAAAA,CAAC,E;;;;;;;;;AAQjCvB,gBAAAA,MAAM,CAACK,KAAP,CAAa,8BAAb;;;;;;;;;;;;;;;;;;AAmBR,eAAYsB,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;;AADe,UAfnBC,IAemB,GAfZ,UAACH,OAAD,EAAa;AAChB,YAAKC,KAAL,CAAWR,QAAX,CAAoBE,OAApB,CAA4BQ,IAA5B,CAAiCH,OAAjC,EAA0CI,IAA1C,CAA+C;AAACC,QAAAA,IAAI,EAAC,MAAKJ,KAAL,CAAWhB;AAAjB,OAA/C,EACCqB,IADD,CACM,SADN,EACiB,UAACC,OAAD,EAAa;AAC1B,cAAKvB,QAAL,CAAc;AACVe,UAAAA,QAAQ,+BAAK,MAAKE,KAAL,CAAWF,QAAhB,IAA0BC,OAA1B;AADE,SAAd;AAGH,OALD,EAMCQ,EAND,CAMI,cANJ,EAMoB,UAASC,UAAT,EAAqBF,OAArB,EAA8BG,eAA9B,EAA8C;AAC9DnC,QAAAA,MAAM,CAACK,KAAP,CAAa,mDAAmDoB,OAAhE;AACH,OARD,EASCQ,EATD,CASI,OATJ,EASa,UAASG,KAAT,EAAe;AACxBpC,QAAAA,MAAM,CAACK,KAAP,CAAa,mCAAb;AACH,OAXD;AAYH,KAEkB;;AAEf,UAAKqB,KAAL,GAAa;AACThB,MAAAA,OAAO,EAAE,EADA;AAETQ,MAAAA,QAAQ,EAAE,IAFD;AAGTG,MAAAA,WAAW,EAAE,CAHJ;AAITG,MAAAA,QAAQ,EAAC,EAJA;AAKTa,MAAAA,UAAU,EAAE,CAAC,iCAAD,EAAoC,iCAApC;AALH,KAAb;AAFe;AASlB;;;;6BAEQ;AAAA;;AACL,aACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKC,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAL,CAAWF,QAAvB,CADL,EAEI;AAAK,QAAA,SAAS,EAAC,gEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAqD,QAAA,KAAK,EAAE;AAACgB,UAAAA,KAAK,EAAC;AAAP,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAII;AAAI,QAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,kDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKd,KAAL,CAAWhB,OADhB,CADJ,CADJ,CAJJ,CAFJ,EAeI;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,SAAS,EAAC,8BAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAyC,QAAA,KAAK,EAAE;AAAC+B,UAAAA,OAAO,EAAC;AAAT,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,KAAK,EAAE;AAACD,UAAAA,KAAK,EAAC;AAAP,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAII;AAAM,QAAA,QAAQ,EAAE,kBAACE,KAAD,EAAW;AACvBA,UAAAA,KAAK,CAACC,cAAN;AACA,cAAMlB,OAAO,GAAG,MAAI,CAACA,OAAL,CAAamB,KAA7B;;AACA,UAAA,MAAI,CAAChB,IAAL,CAAUH,OAAV;AACH,SAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,sBAA/B;AAAsD,QAAA,SAAS,EAAC,mBAAhE;AAAoF,QAAA,GAAG,EAAE,aAACoB,KAAD;AAAA,iBAAW,MAAI,CAACpB,OAAL,GAAeoB,KAA1B;AAAA,SAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAMI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,SAAS,EAAC,2BAA/B;AAA2D,QAAA,KAAK,EAAC,MAAjE;AAAwE,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAC;AAAR,SAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CAJJ,CADJ,CADJ,CADJ,EAkBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlBJ,EAmBI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKpB,KAAL,CAAWW,UAAX,CAAsBU,GAAtB,CAA0B,UAACtB,OAAD,EAAUuB,GAAV,EAAkB;AACzC,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,OAAD;AAAS,UAAA,SAAS,EAAC,WAAnB;AAA+B,UAAA,KAAK,EAAE;AAACC,YAAAA,QAAQ,EAAC;AAAV,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAII,oBAAC,YAAD;AACI,UAAA,QAAQ,EAAC,KADb;AACmB,UAAA,MAAM,EAAC,QAD1B;AACmC,UAAA,KAAK,EAAE;AAACC,YAAAA,WAAW,EAAC;AAAb,WAD1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,EAQI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yHAFJ,EAGI,oBAAC,MAAD;AAAQ,UAAA,IAAI,EAAEzB,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,CARJ,CADJ,CADJ,CADJ;AAoBH,OArBA,CADL,CAnBJ,CAfJ,CADJ;AAgEH;;;;EAhNarC,S;;AAoNlB,eAAeS,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Diamonds from '../abis/Diamonds.json';\nimport {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\nimport './App.css';\n// import detectEthereumProvider from \"@metamask/detect-provider\";\n\nclass App extends Component {\n\n    // async componentDidMount() {\n    //     await this.loadWeb3();\n    //     await this.loadBlockchainData();\n    // }\n\n    // // first up is to detect ethereum provider\n    // async loadWeb3() {\n    //     const provider = await detectEthereumProvider();\n\n    //     // modern browsers\n    //     // if there is a provider then lets\n    //     // lets log that it's working and access the window from the doc\n    //     // to set Web3 to the provider \n        \n    //     if(provider) {\n    //         console.log('ethereum wallet is connected')\n    //         window.web3 = new Web3(provider)\n    //     } else {\n    //         // no ethereum provider\n    //         console.log('no ethereum wallet detected')\n    //     }\n    // }\n\n    // async loadBlockchainData() {\n    //     const web3 = window.web3\n    //     const accounts = await web3.eth.getAccounts()\n    //     this.setState({account:accounts[0]})\n\n    //     // create a constant js variable networkId which \n    //     //is set to blockchain network id \n    //     const networkId = await web3.eth.net.getId()\n    //     const networkData = Diamonds.networks[networkId]\n    //      if(networkData) {\n    //          // EXERCISE TIME!!!! :)\n    //          // 1. create a var abi set to the Kryptobird abi\n    //          // 2. create a var address set to networkData address\n    //          // 3. create a var contract which grabs a \n    //          //new instance of web3 eth Contract  \n    //          // 4. log in the console the var contract successfully - GOOD LUCK!!!!\n\n    //          const abi = Diamonds.abi;\n    //          const address = networkData.address; \n    //          const contract = new web3.eth.Contract(abi, address)\n    //          this.setState({contract})\n\n    //          // call the total supply of our Krypto Birdz \n    //          // grab the total supply on the front end and log the results\n    //          // go to web3 doc and read up on methods and call \n    //          const totalSupply = await contract.methods.totalSupply().call()\n    //         this.setState({totalSupply})\n    //         // set up an array to keep track of tokens \n    //         // load KryptoBirdz\n    //         for(let i = 1; i <= totalSupply; i++) {\n    //             const diamond = await contract.methods.diamonds(i - 1).call()\n    //             // how should we handle the state on the front end? \n    //             this.setState({\n    //                 diamonds:[...this.state.diamonds, diamond]\n    //             })\n    //         }\n    //      } else {\n    //          window.alert('Smart contract not deployed')\n    //      }\n    // }\n\n    async componentWillMount() {\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n    }\n\n    async loadWeb3() {\n        if (window.ethereum) {\n          window.web3 = new Web3(window.ethereum)\n          await window.ethereum.enable()\n        }\n        else if (window.web3) {\n          window.web3 = new Web3(window.web3.currentProvider)\n        }\n        else {\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n        }\n      }\n\n    async loadBlockchainData() {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        // const accounts = await ethereum.request({ method: 'eth_accounts' });\n        this.setState({account:accounts[0]})\n\n        //get contract\n        const networkId = await web3.eth.net.getId();\n        const networkData = Diamonds.networks[networkId];\n\n        if(networkData) {\n            const abi = Diamonds.abi;\n            const address = networkData.address;\n            const contract = new web3.eth.Contract(abi, address);\n            this.setState({contract})\n\n            //get total supply\n            const totalSupply = await contract.methods.totalSupply().call()\n            this.setState({totalSupply})\n            \n            //load diamonds\n            for(let i = 0; i < totalSupply; i++) {\n                const diamond = await contract.methods.diamonds(i).call()\n                this.setState({\n                    diamonds:[...this.state.diamonds, diamond]\n                })\n            }\n    \n        } else {\n            window.alert(\"Smart contract not deployed.\")\n        }\n    }\n\n    mint = (diamond) => {\n        this.state.contract.methods.mint(diamond).send({from:this.state.account})\n        .once('receipt', (receipt) => {\n            this.setState({\n                diamonds:[...this.state.diamonds, diamond]\n            })\n        })\n        .on('confirmation', function(confNumber, receipt, latestBlockHash){ \n            window.alert(\"Congratulations! Your NFT has been minted!\\n\\n\" + diamond)\n        })\n        .on('error', function(error){ \n            window.alert(\"Mint failed!\\n\\nPlease try again.\")\n        })\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: '',\n            contract: null,\n            totalSupply: 0,\n            diamonds:[],\n            testimages: ['https://i.ibb.co/3TBLH2B/d1.png', 'https://i.ibb.co/jfH8wzv/d2.png']\n        }\n    }\n\n    render() {\n        return (\n            <div className='container-full'>\n                {console.log(this.state.diamonds)}\n                <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\n                    <div className='navbar-brand col-sm-3 col-md-3 mr-0' style={{color:'white'}}>\n                        Diamond Hands\n                    </div>\n                    <ul className='nav-bar-nav px-3'>\n                        <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\n                            <small className='text-white'>\n                                {this.state.account}\n                            </small>\n                        </li>\n                    </ul>\n                </nav>\n\n                <div className='container-fluid mt-1'>\n                    <div className='row'>\n                        <main role='main' className='col-lg-12 d-flex text-center'>\n                            <div className='content mr-auto ml-auto' style={{opacity:'0.8'}}>\n                                <h1 style={{color:'black'}}>\n                                    Diamond Hands\n                                </h1>\n                                <form onSubmit={(event) => {\n                                    event.preventDefault()\n                                    const diamond = this.diamond.value\n                                    this.mint(diamond)\n                                }}>\n                                    <input type='text' placeholder='Add file location...' className='form-control mb-1' ref={(input) => this.diamond = input}/>\n                                    <input type='submit' className='btn btn-primary btn-black' value='MINT' style={{margin:'6px'}}/>\n                                </form>\n                            </div>\n                        </main>\n                    </div>\n                    <hr></hr>\n                    <div className='row textCenter'>\n                        {this.state.testimages.map((diamond, key) => {\n                            return (\n                                <div>\n                                    <div>\n                                        <MDBCard className='token img' style={{maxWidth:'22rem'}}>\n                                            {/* <MDBCardImage \n                                                src={diamond} position='top' height='250rem' style={{marginRight:'4px'}}>\n                                            </MDBCardImage> */}\n                                            <MDBCardImage \n                                                position='top' height='250rem' style={{marginRight:'4px'}}>\n                                                Test\n                                            </MDBCardImage>\n                                            <MDBCardBody>\n                                                <MDBCardTitle>Diamond Hands</MDBCardTitle>\n                                                <MDBCardText>These diamonds are all uniquely mined and one of a kind. Each diamond can only be owned by a single person.</MDBCardText>\n                                                <MDBBtn href={diamond}>Download</MDBBtn>\n                                            </MDBCardBody>\n                                        </MDBCard>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>   \n\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}