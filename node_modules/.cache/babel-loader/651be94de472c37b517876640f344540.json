{"ast":null,"code":"import _defineProperty from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/majikk/Desktop/ConsenSys/diamondV3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/majikk/Desktop/ConsenSys/diamondV3/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Diamonds from '../abis/Diamonds.json';\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBBtn } from 'mdb-react-ui-kit';\nimport './App.css'; // import detectEthereumProvider from \"@metamask/detect-provider\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    // async componentDidMount() {\n    //     await this.loadWeb3();\n    //     await this.loadBlockchainData();\n    // }\n    // // first up is to detect ethereum provider\n    // async loadWeb3() {\n    //     const provider = await detectEthereumProvider();\n    //     // modern browsers\n    //     // if there is a provider then lets\n    //     // lets log that it's working and access the window from the doc\n    //     // to set Web3 to the provider \n    //     if(provider) {\n    //         console.log('ethereum wallet is connected')\n    //         window.web3 = new Web3(provider)\n    //     } else {\n    //         // no ethereum provider\n    //         console.log('no ethereum wallet detected')\n    //     }\n    // }\n    // async loadBlockchainData() {\n    //     const web3 = window.web3\n    //     const accounts = await web3.eth.getAccounts()\n    //     this.setState({account:accounts[0]})\n    //     // create a constant js variable networkId which \n    //     //is set to blockchain network id \n    //     const networkId = await web3.eth.net.getId()\n    //     const networkData = Diamonds.networks[networkId]\n    //      if(networkData) {\n    //          // EXERCISE TIME!!!! :)\n    //          // 1. create a var abi set to the Kryptobird abi\n    //          // 2. create a var address set to networkData address\n    //          // 3. create a var contract which grabs a \n    //          //new instance of web3 eth Contract  \n    //          // 4. log in the console the var contract successfully - GOOD LUCK!!!!\n    //          const abi = Diamonds.abi;\n    //          const address = networkData.address; \n    //          const contract = new web3.eth.Contract(abi, address)\n    //          this.setState({contract})\n    //          // call the total supply of our Krypto Birdz \n    //          // grab the total supply on the front end and log the results\n    //          // go to web3 doc and read up on methods and call \n    //          const totalSupply = await contract.methods.totalSupply().call()\n    //         this.setState({totalSupply})\n    //         // set up an array to keep track of tokens \n    //         // load KryptoBirdz\n    //         for(let i = 1; i <= totalSupply; i++) {\n    //             const diamond = await contract.methods.diamonds(i - 1).call()\n    //             // how should we handle the state on the front end? \n    //             this.setState({\n    //                 diamonds:[...this.state.diamonds, diamond]\n    //             })\n    //         }\n    //      } else {\n    //          window.alert('Smart contract not deployed')\n    //      }\n    // }\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, diamond;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                // const accounts = await ethereum.request({ method: 'eth_accounts' });\n                this.setState({\n                  account: accounts[0]\n                }); //get contract\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = Diamonds.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                abi = Diamonds.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                }); //get total supply\n\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                }); //load diamonds\n\n                i = 0;\n\n              case 19:\n                if (!(i < totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.diamonds(i).call();\n\n              case 22:\n                diamond = _context3.sent;\n                this.setState({\n                  diamonds: [].concat(_toConsumableArray(this.state.diamonds), [diamond])\n                });\n\n              case 24:\n                i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert(\"Smart contract not deployed.\");\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"NotifierGenerator\",\n    value: function NotifierGenerator() {\n      var _React$useState = React.useState(\"top-right\"),\n          _React$useState2 = _slicedToArray(_React$useState, 2),\n          position = _React$useState2[0],\n          setPosition = _React$useState2[1];\n\n      var _React$useState3 = React.useState([]),\n          _React$useState4 = _slicedToArray(_React$useState3, 2),\n          alerts = _React$useState4[0],\n          setAlerts = _React$useState4[1];\n\n      var _React$useState5 = React.useState(0),\n          _React$useState6 = _slicedToArray(_React$useState5, 2),\n          alertTimeout = _React$useState6[0],\n          setAlertTimeout = _React$useState6[1];\n\n      var _React$useState7 = React.useState(\"This is a test of the Emergency Broadcast System. This is only a test.\"),\n          _React$useState8 = _slicedToArray(_React$useState7, 2),\n          newMessage = _React$useState8[0],\n          setNewMessage = _React$useState8[1];\n\n      var generate = React.useCallback(function (type) {\n        setAlerts(function (alerts) {\n          return [].concat(_toConsumableArray(alerts), [{\n            id: new Date().getTime(),\n            type: type,\n            headline: \"Whoa, \".concat(type, \"!\"),\n            message: newMessage\n          }]);\n        });\n      }, [newMessage]);\n      var onDismissed = React.useCallback(function (alert) {\n        setAlerts(function (alerts) {\n          var idx = alerts.indexOf(alert);\n          if (idx < 0) return alerts;\n          return [].concat(_toConsumableArray(alerts.slice(0, idx)), _toConsumableArray(alerts.slice(idx + 1)));\n        });\n      }, []);\n      var clearAlerts = React.useCallback(function () {\n        return setAlerts([]);\n      }, []);\n      var onTimeoutChange = React.useCallback(function (_ref) {\n        var value = _ref.target.value;\n        return setAlertTimeout(+value * 1000);\n      }, []);\n      var onNewMessageChange = React.useCallback(function (_ref2) {\n        var value = _ref2.target.value;\n        return setNewMessage(value);\n      }, []);\n      var onPositionChange = React.useCallback(function (_ref3) {\n        var value = _ref3.target.value;\n        return setPosition(value);\n      }, []);\n      var clearAllButton = alerts.length ? React.createElement(\"button\", {\n        className: \"btn btn-link\",\n        onClick: clearAlerts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"Clear all alerts\") : null;\n      return React.createElement(React.Fragment, null, React.createElement(AlertList, {\n        position: position,\n        alerts: alerts,\n        timeout: alertTimeout,\n        dismissTitle: \"Begone!\",\n        onDismiss: onDismissed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"new-message-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Message\"), React.createElement(\"textarea\", {\n        id: \"new-message-control\",\n        placeholder: \"Something happened, here are the deets\",\n        className: \"form-control\",\n        value: newMessage,\n        onChange: onNewMessageChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"timeout-control\",\n        className: \"control-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Auto-dismiss after\"), React.createElement(\"div\", {\n        className: \"input-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"timeout-control\",\n        className: \"form-control\",\n        type: \"number\",\n        value: alertTimeout / 1000,\n        onChange: onTimeoutChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"input-group-append\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"input-group-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"seconds\")))), React.createElement(\"div\", {\n        className: \"form-group col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"position-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"Position\"), React.createElement(\"select\", {\n        onChange: onPositionChange,\n        className: \"form-control\",\n        id: \"position-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, [\"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\"].map(function (p) {\n        return React.createElement(\"option\", {\n          key: p,\n          value: p,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227\n          },\n          __self: this\n        }, p);\n      })))), React.createElement(\"div\", {\n        className: \"form-group text-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, clearAllButton, React.createElement(\"div\", {\n        className: \"btn-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, [\"info\", \"success\", \"warning\", \"danger\"].map(function (type) {\n        return React.createElement(\"button\", {\n          key: type,\n          type: \"button\",\n          className: \"btn btn-\".concat(type),\n          onClick: function onClick() {\n            return generate(type);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, \"generate \", type);\n      }))));\n    }\n  }, {\n    key: \"generateRandomColor\",\n    value: function generateRandomColor() {\n      var letters = '0123456789ABCDEF';\n      var color = '#';\n\n      for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n\n      return color;\n    }\n  }, {\n    key: \"generateImperfection\",\n    value: function generateImperfection() {\n      var possible = '0111111';\n      var imperfection = possible[Math.floor(Math.random() * 7)];\n      return imperfection;\n    }\n  }, {\n    key: \"generateSparkle\",\n    value: function generateSparkle() {\n      var num = Math.floor(Math.random() * 2); // Case 0: solid, Case 1: solid + flicker, Case 2: none\n\n      switch (num) {\n        case 0:\n          var sparkle = '1xxxxxxx ';\n          break;\n\n        case 1:\n          sparkle = '1flicker ';\n          break;\n\n        case 2:\n          sparkle = '0xxxxxxx ';\n          break;\n      }\n\n      return sparkle;\n    }\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (diamond) {\n      _this.state.contract.methods.mint(diamond).send({\n        from: _this.state.account\n      }).once('receipt', function (receipt) {\n        _this.setState({\n          diamonds: [].concat(_toConsumableArray(_this.state.diamonds), [diamond])\n        });\n      }).on('confirmation', function (confNumber, receipt, latestBlockHash) {\n        window.alert(\"Congratulations! Your NFT has been minted!\" + diamond);\n      }).on('error', function (error) {\n        window.alert(\"Mint failed!\\n\\nPlease try again.\");\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      diamonds: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _React$createElement,\n          _React$createElement2,\n          _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container-full\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(\"div\", (_React$createElement = {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        }\n      }, _defineProperty(_React$createElement, \"style\", {\n        fontSize: '1rem'\n      }), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement), \"diamonds mined: \", this.state.totalSupply.toString()), React.createElement(\"ul\", {\n        className: \"nav-bar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        style: {\n          fontSize: '0.8rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, \"wallet: \", this.state.account)))), React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, React.createElement(\"h1\", (_React$createElement2 = {\n        style: {\n          color: 'black'\n        }\n      }, _defineProperty(_React$createElement2, \"style\", {\n        fontSize: '7rem'\n      }), _defineProperty(_React$createElement2, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      }), _defineProperty(_React$createElement2, \"__self\", this), _React$createElement2), \"Diamond Hands\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault(); // const diamond = this.diamond.value\n\n          var backgroundcolor = _this2.generateRandomColor();\n\n          var diamondbody = _this2.generateRandomColor();\n\n          var mid_imp = _this2.generateImperfection();\n\n          var top_imp = _this2.generateImperfection();\n\n          var left_imp = _this2.generateImperfection();\n\n          var small_sparkle = _this2.generateSparkle() + 'small_sparkle';\n          var big_sparkle = _this2.generateSparkle() + 'big_sparkle';\n          var diamond_num = _this2.state.diamonds.length + 1;\n          var diamond = backgroundcolor + diamondbody + mid_imp + top_imp + left_imp + small_sparkle + big_sparkle + diamond_num;\n\n          _this2.mint(diamond);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-colour-1\",\n        value: \"Mine Diamond\",\n        style: {\n          margin: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        style: {\n          fontSize: '1.3em'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, \"Put diamond below title and above button (flawless blue & red) Description of diamond hands, rarity of items, etc... These diamonds are all uniquely mined and one of a kind. Each diamond can only be owned by a single person. Cap total mineable (doesn't need to be a limit because it won't allow a duplicate...just need to calculate total number of combinations...maybe look at limiting colors) State total possible supply in description, percentages, etc... Put stats in card description: sparkle, flicker, imperfections Set up so owner's diamonds show up and not entire collection\"), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row textCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }, this.state.diamonds.map(function (diamond, key) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 377\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378\n          },\n          __self: this\n        }, React.createElement(MDBCard, {\n          className: \"token\",\n          style: {\n            maxWidth: '25rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"diamond\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 380\n          },\n          __self: this\n        }, React.createElement(\"svg\", {\n          version: \"1.1\",\n          viewBox: \"0 0 211.67 211.67\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 381\n          },\n          __self: this\n        }, React.createElement(\"rect\", {\n          className: \"backgroundcolor\",\n          width: \"211.67\",\n          height: \"211.67\",\n          fill: diamond.substring(0, 7),\n          \"stroke-width\": \".22252\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 382\n          },\n          __self: this\n        }), React.createElement(\"g\", {\n          id: \"dbody\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 384\n          },\n          __self: this\n        }, React.createElement(\"path\", {\n          className: \"diamond_body\",\n          fill: diamond.substring(7, 14),\n          d: \"m50.635 25.94-17.636 19.99 21.499-0.077514 12.417-19.912h-16.279zm25.804 0-9.4484 20.12 38.573-0.39118 0.14521-0.0016h0.061l38.652 0.35448-9.3177-20.082h-58.665zm68.238 0 12.373 20.069 21.622 0.14418-17.669-20.213h-16.325zm-111.68 25.968 36.589 66.724 35.975 67.097-25.348-67.097-25.717-66.566-21.499-0.15968zm72.564 133.82 19.268-66.933 19.592-66.558-38.655 0.2067-0.20619-0.0016 0.17673 0.0021h-0.0315l-0.14521-0.0021-38.57-0.53898 19.448 66.724 19.123 67.097zm0 0 36.25-66.933 36.859-66.558-21.622 0.06149-25.946 66.494-25.54 66.933z\",\n          \"fill-rule\": \"evenodd\",\n          \"stroke-width\": \".97154\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 385\n          },\n          __self: this\n        }), React.createElement(\"path\", {\n          className: diamond.substring(18, 39),\n          opacity: diamond.substring(17, 18),\n          id: \"small_sparkle\",\n          d: \"m177.82 54.405-1.6726 6.5908-0.38773-6.8497-5.9836 0.21276 5.5616-2.5394-2.0255-6.4592 3.825 5.2802 4.7318-4.2048-3.1977 5.8029 4.9498 3.8606z\",\n          \"stroke-width\": \".11306\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 386\n          },\n          __self: this\n        }), React.createElement(\"path\", {\n          className: diamond.substring(40, 59),\n          opacity: diamond.substring(39, 40),\n          id: \"big_sparkle\",\n          d: \"m80.832 26.361-3.5654 10.707-0.82655-11.127-12.755 0.34563 11.856-4.1254-4.3179-10.493 8.1539 8.5778 10.087-6.8307-6.8166 9.4269 10.552 6.2715z\",\n          \"stroke-width\": \".21041\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 387\n          },\n          __self: this\n        })), React.createElement(\"rect\", {\n          className: \"imperfection_middle\",\n          opacity: diamond.substring(14, 15),\n          x: \"113.68\",\n          y: \"79.171\",\n          width: \"2.6458\",\n          height: \"2.6458\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 390\n          },\n          __self: this\n        }), React.createElement(\"rect\", {\n          className: \"imperfection_top\",\n          opacity: diamond.substring(15, 16),\n          x: \"127.52\",\n          y: \"38.325\",\n          width: \"2.6458\",\n          height: \"2.6458\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391\n          },\n          __self: this\n        }), React.createElement(\"rect\", {\n          className: \"imperfection_left\",\n          opacity: diamond.substring(16, 17),\n          x: \"45.872\",\n          y: \"63.368\",\n          width: \"2.6458\",\n          height: \"2.6458\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 392\n          },\n          __self: this\n        }))), React.createElement(MDBCardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 395\n          },\n          __self: this\n        }, React.createElement(MDBCardTitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396\n          },\n          __self: this\n        }, \"Diamond #\", diamond.substring(59)), React.createElement(MDBBtn, {\n          className: \"btn btn-colour-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 397\n          },\n          __self: this\n        }, \"Transfer\")))));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/majikk/Desktop/ConsenSys/diamondV3/src/components/App.js"],"names":["React","Component","Web3","Diamonds","MDBCard","MDBCardBody","MDBCardTitle","MDBBtn","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","diamonds","diamond","state","useState","position","setPosition","alerts","setAlerts","alertTimeout","setAlertTimeout","newMessage","setNewMessage","generate","useCallback","type","id","Date","getTime","headline","message","onDismissed","idx","indexOf","slice","clearAlerts","onTimeoutChange","value","target","onNewMessageChange","onPositionChange","clearAllButton","length","map","p","letters","color","Math","floor","random","possible","imperfection","num","sparkle","props","mint","send","from","once","receipt","on","confNumber","latestBlockHash","error","fontSize","toString","opacity","event","preventDefault","backgroundcolor","generateRandomColor","diamondbody","mid_imp","generateImperfection","top_imp","left_imp","small_sparkle","generateSparkle","big_sparkle","diamond_num","margin","key","maxWidth","substring"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Diamonds from '../abis/Diamonds.json';\nimport {MDBCard, MDBCardBody, MDBCardTitle, MDBBtn} from 'mdb-react-ui-kit';\nimport './App.css';\n// import detectEthereumProvider from \"@metamask/detect-provider\";\n\nclass App extends Component {\n\n    // async componentDidMount() {\n    //     await this.loadWeb3();\n    //     await this.loadBlockchainData();\n    // }\n\n    // // first up is to detect ethereum provider\n    // async loadWeb3() {\n    //     const provider = await detectEthereumProvider();\n\n    //     // modern browsers\n    //     // if there is a provider then lets\n    //     // lets log that it's working and access the window from the doc\n    //     // to set Web3 to the provider \n        \n    //     if(provider) {\n    //         console.log('ethereum wallet is connected')\n    //         window.web3 = new Web3(provider)\n    //     } else {\n    //         // no ethereum provider\n    //         console.log('no ethereum wallet detected')\n    //     }\n    // }\n\n    // async loadBlockchainData() {\n    //     const web3 = window.web3\n    //     const accounts = await web3.eth.getAccounts()\n    //     this.setState({account:accounts[0]})\n\n    //     // create a constant js variable networkId which \n    //     //is set to blockchain network id \n    //     const networkId = await web3.eth.net.getId()\n    //     const networkData = Diamonds.networks[networkId]\n    //      if(networkData) {\n    //          // EXERCISE TIME!!!! :)\n    //          // 1. create a var abi set to the Kryptobird abi\n    //          // 2. create a var address set to networkData address\n    //          // 3. create a var contract which grabs a \n    //          //new instance of web3 eth Contract  \n    //          // 4. log in the console the var contract successfully - GOOD LUCK!!!!\n\n    //          const abi = Diamonds.abi;\n    //          const address = networkData.address; \n    //          const contract = new web3.eth.Contract(abi, address)\n    //          this.setState({contract})\n\n    //          // call the total supply of our Krypto Birdz \n    //          // grab the total supply on the front end and log the results\n    //          // go to web3 doc and read up on methods and call \n    //          const totalSupply = await contract.methods.totalSupply().call()\n    //         this.setState({totalSupply})\n    //         // set up an array to keep track of tokens \n    //         // load KryptoBirdz\n    //         for(let i = 1; i <= totalSupply; i++) {\n    //             const diamond = await contract.methods.diamonds(i - 1).call()\n    //             // how should we handle the state on the front end? \n    //             this.setState({\n    //                 diamonds:[...this.state.diamonds, diamond]\n    //             })\n    //         }\n    //      } else {\n    //          window.alert('Smart contract not deployed')\n    //      }\n    // }\n\n    async componentWillMount() {\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n    }\n\n    async loadWeb3() {\n        if (window.ethereum) {\n          window.web3 = new Web3(window.ethereum)\n          await window.ethereum.enable()\n        }\n        else if (window.web3) {\n          window.web3 = new Web3(window.web3.currentProvider)\n        }\n        else {\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n        }\n      }\n\n    async loadBlockchainData() {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        // const accounts = await ethereum.request({ method: 'eth_accounts' });\n        this.setState({account:accounts[0]})\n\n        //get contract\n        const networkId = await web3.eth.net.getId();\n        const networkData = Diamonds.networks[networkId];\n\n        if(networkData) {\n            const abi = Diamonds.abi;\n            const address = networkData.address;\n            const contract = new web3.eth.Contract(abi, address);\n            this.setState({contract})\n\n            //get total supply\n            const totalSupply = await contract.methods.totalSupply().call()\n            this.setState({totalSupply})\n            \n            //load diamonds\n            for(let i = 0; i < totalSupply; i++) {\n                const diamond = await contract.methods.diamonds(i).call()\n                this.setState({\n                    diamonds:[...this.state.diamonds, diamond]\n                })\n            }\n    \n        } else {\n            window.alert(\"Smart contract not deployed.\")\n        }\n    }\n\n    NotifierGenerator() {\n        const [position, setPosition] = React.useState(\"top-right\");\n        const [alerts, setAlerts] = React.useState([]);\n        const [alertTimeout, setAlertTimeout] = React.useState(0);\n        const [newMessage, setNewMessage] = React.useState(\n            \"This is a test of the Emergency Broadcast System. This is only a test.\"\n        );\n    \n        const generate = React.useCallback(\n            type => {\n                setAlerts(alerts => [\n                    ...alerts,\n                    {\n                        id: new Date().getTime(),\n                        type: type,\n                        headline: `Whoa, ${type}!`,\n                        message: newMessage\n                    }\n                ]);\n            },\n            [newMessage]\n        );\n    \n        const onDismissed = React.useCallback(alert => {\n            setAlerts(alerts => {\n                const idx = alerts.indexOf(alert);\n                if (idx < 0) return alerts;\n                return [...alerts.slice(0, idx), ...alerts.slice(idx + 1)];\n            });\n        }, []);\n    \n        const clearAlerts = React.useCallback(() => setAlerts([]), []);\n    \n        const onTimeoutChange = React.useCallback(\n            ({ target: { value } }) => setAlertTimeout(+value * 1000),\n            []\n        );\n    \n        const onNewMessageChange = React.useCallback(\n            ({ target: { value } }) => setNewMessage(value),\n            []\n        );\n    \n        const onPositionChange = React.useCallback(\n            ({ target: { value } }) => setPosition(value),\n            []\n        );\n    \n        const clearAllButton = alerts.length ? (\n            <button className=\"btn btn-link\" onClick={clearAlerts}>\n                Clear all alerts\n            </button>\n        ) : null;\n    \n        return (\n            <>\n                <AlertList\n                    position={position}\n                    alerts={alerts}\n                    timeout={alertTimeout}\n                    dismissTitle=\"Begone!\"\n                    onDismiss={onDismissed}\n                />\n    \n                <div className=\"form-group\">\n                    <label htmlFor=\"new-message-control\">Message</label>\n                    <textarea\n                        id=\"new-message-control\"\n                        placeholder=\"Something happened, here are the deets\"\n                        className=\"form-control\"\n                        value={newMessage}\n                        onChange={onNewMessageChange}\n                    />\n                </div>\n    \n                <div className=\"form-row\">\n                    <div className=\"form-group col-md-6\">\n                        <label htmlFor=\"timeout-control\" className=\"control-label\">\n                            Auto-dismiss after\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                id=\"timeout-control\"\n                                className=\"form-control\"\n                                type=\"number\"\n                                value={alertTimeout / 1000}\n                                onChange={onTimeoutChange}\n                            />\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">seconds</span>\n                            </div>\n                        </div>\n                    </div>\n    \n                    <div className=\"form-group col-md-6\">\n                        <label htmlFor=\"position-control\">Position</label>\n                        <select\n                            onChange={onPositionChange}\n                            className=\"form-control\"\n                            id=\"position-control\"\n                        >\n                            {[\"top-right\", \"top-left\", \"bottom-right\", \"bottom-left\"].map(p => (\n                                <option key={p} value={p}>\n                                    {p}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n    \n                <div className=\"form-group text-right\">\n                    {clearAllButton}\n                    <div className=\"btn-group\">\n                        {[\"info\", \"success\", \"warning\", \"danger\"].map(type => (\n                            <button\n                                key={type}\n                                type=\"button\"\n                                className={`btn btn-${type}`}\n                                onClick={() => generate(type)}\n                            >\n                                generate {type}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n            </>\n        );\n    }\n\n    mint = (diamond) => {\n        this.state.contract.methods.mint(diamond).send({from:this.state.account})\n        .once('receipt', (receipt) => {\n            this.setState({\n                diamonds:[...this.state.diamonds, diamond]\n            })\n        })\n        .on('confirmation', function(confNumber, receipt, latestBlockHash){ \n            window.alert(\"Congratulations! Your NFT has been minted!\" + diamond)\n        })\n        .on('error', function(error){ \n            window.alert(\"Mint failed!\\n\\nPlease try again.\")\n        })\n    }\n\n    generateRandomColor() {\n        var letters = '0123456789ABCDEF';\n        var color = '#';\n        for (var i = 0; i < 6; i++) {\n          color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    generateImperfection() {\n        var possible = '0111111';\n        var imperfection = possible[Math.floor(Math.random() * 7)];\n    \n        return imperfection;\n    }\n\n    generateSparkle() {\n        var num = Math.floor(Math.random() * 2);\n        \n        // Case 0: solid, Case 1: solid + flicker, Case 2: none\n        switch (num) {\n            case 0:\n                var sparkle = '1xxxxxxx ';\n                break\n            case 1:\n                sparkle = '1flicker ';\n                break\n            case 2:\n                sparkle = '0xxxxxxx ';\n                break\n        }\n\n        return sparkle;\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            account: '',\n            contract: null,\n            totalSupply: 0,\n            diamonds:[]\n        }\n    }\n\n    render() {\n        return (\n            <div className='container-full'>\n                {/* {console.log(this.state.diamonds)} */}\n                <nav className='navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow'>\n                    <div className='navbar-brand col-sm-3 col-md-3 mr-0' style={{color:'white'}} style={{fontSize: '1rem'}}>\n                        diamonds mined: {this.state.totalSupply.toString()}\n                    </div>\n                    <ul className='nav-bar-nav px-3'>\n                        <li className='nav-item text-nowrap d-none d-sm-none d-sm-block'>\n                            <small className='text-white' style={{fontSize: '0.8rem'}}>\n                                wallet: {this.state.account}\n                            </small>\n                        </li>\n                    </ul>\n                </nav>\n\n                <div className='container-fluid mt-1'>\n                    <div className='row'>\n                        <main role='main' className='col-lg-12 d-flex text-center'>\n                            <div className='content mr-auto ml-auto' style={{opacity:'0.8'}}>\n                                <h1 style={{color:'black'}} style={{fontSize: '7rem'}}>\n                                    Diamond Hands\n                                </h1>\n                                <form onSubmit={(event) => {\n                                    event.preventDefault()\n                                    // const diamond = this.diamond.value\n                                    \n                                    const backgroundcolor = this.generateRandomColor()\n                                    const diamondbody = this.generateRandomColor()\n                                    const mid_imp = this.generateImperfection()\n                                    const top_imp = this.generateImperfection()\n                                    const left_imp = this.generateImperfection()\n                                    const small_sparkle = this.generateSparkle() + 'small_sparkle'\n                                    const big_sparkle = this.generateSparkle() + 'big_sparkle'\n                                    const diamond_num = this.state.diamonds.length + 1\n                                    const diamond = backgroundcolor + diamondbody + mid_imp + top_imp + left_imp + small_sparkle + big_sparkle + diamond_num\n                                    \n                                    this.mint(diamond)\n                                }}>\n                                    {/* <input type='text' placeholder='Add file location...' className='form-control mb-1' ref={(input) => this.diamond = input}/> */}\n                                    <input type='submit' className='btn btn-colour-1' value='Mine Diamond' style={{margin:'10px'}}/>\n                                </form>\n                            </div>\n                        </main>\n                    </div>\n                    <hr></hr>\n                    <p style={{fontSize: '1.3em'}}>\n                        Put diamond below title and above button (flawless blue & red)\n                        Description of diamond hands, rarity of items, etc...\n                        These diamonds are all uniquely mined and one of a kind. Each diamond can only be owned by a single person.\n\n                        Cap total mineable (doesn't need to be a limit because it won't allow a duplicate...just need to calculate total number of combinations...maybe look at limiting colors)\n                        State total possible supply in description, percentages, etc...\n\n                        Put stats in card description: sparkle, flicker, imperfections\n\n                        Set up so owner's diamonds show up and not entire collection\n                    </p>\n                    <hr></hr>\n                    <div className='row textCenter'>\n                        {this.state.diamonds.map((diamond, key) => {\n                            return (\n                                <div>\n                                    <div>\n                                        <MDBCard className='token' style={{maxWidth:'25rem'}}>\n                                            <div className='diamond'>\n                                                <svg  version=\"1.1\" viewBox=\"0 0 211.67 211.67\" xmlns=\"http://www.w3.org/2000/svg\">    \n                                                    <rect className=\"backgroundcolor\" width=\"211.67\" height=\"211.67\" fill={diamond.substring(0, 7)} stroke-width=\".22252\"/>\n                                                    \n                                                    <g id=\"dbody\">\n                                                        <path className=\"diamond_body\" fill={diamond.substring(7, 14)} d=\"m50.635 25.94-17.636 19.99 21.499-0.077514 12.417-19.912h-16.279zm25.804 0-9.4484 20.12 38.573-0.39118 0.14521-0.0016h0.061l38.652 0.35448-9.3177-20.082h-58.665zm68.238 0 12.373 20.069 21.622 0.14418-17.669-20.213h-16.325zm-111.68 25.968 36.589 66.724 35.975 67.097-25.348-67.097-25.717-66.566-21.499-0.15968zm72.564 133.82 19.268-66.933 19.592-66.558-38.655 0.2067-0.20619-0.0016 0.17673 0.0021h-0.0315l-0.14521-0.0021-38.57-0.53898 19.448 66.724 19.123 67.097zm0 0 36.25-66.933 36.859-66.558-21.622 0.06149-25.946 66.494-25.54 66.933z\" fill-rule=\"evenodd\" stroke-width=\".97154\"/>\n                                                        <path className={diamond.substring(18, 39)} opacity={diamond.substring(17, 18)} id=\"small_sparkle\" d=\"m177.82 54.405-1.6726 6.5908-0.38773-6.8497-5.9836 0.21276 5.5616-2.5394-2.0255-6.4592 3.825 5.2802 4.7318-4.2048-3.1977 5.8029 4.9498 3.8606z\" stroke-width=\".11306\"/>\n                                                        <path className={diamond.substring(40, 59)} opacity={diamond.substring(39, 40)} id=\"big_sparkle\" d=\"m80.832 26.361-3.5654 10.707-0.82655-11.127-12.755 0.34563 11.856-4.1254-4.3179-10.493 8.1539 8.5778 10.087-6.8307-6.8166 9.4269 10.552 6.2715z\" stroke-width=\".21041\"/>\n                                                    </g>\n                                                    \n                                                    <rect className=\"imperfection_middle\" opacity={diamond.substring(14, 15)} x=\"113.68\" y=\"79.171\" width=\"2.6458\" height=\"2.6458\"/>\n                                                    <rect className=\"imperfection_top\" opacity={diamond.substring(15, 16)} x=\"127.52\" y=\"38.325\" width=\"2.6458\" height=\"2.6458\"/>\n                                                    <rect className=\"imperfection_left\" opacity={diamond.substring(16, 17)} x=\"45.872\" y=\"63.368\" width=\"2.6458\" height=\"2.6458\"/>\n                                                </svg>\n                                            </div>\n                                            <MDBCardBody>\n                                                <MDBCardTitle>Diamond #{diamond.substring(59)}</MDBCardTitle>\n                                                <MDBBtn className='btn btn-colour-1'>Transfer</MDBBtn>\n                                            </MDBCardBody>\n                                        </MDBCard>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>   \n\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}